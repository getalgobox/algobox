import core

class ABObserver(object):
    """
    ABObserver stores information which outside of the backtest,
    would be apparent from our timeseries store and database.

    Attributes:
        * equity_series (list) a list of rolling equity values, equity being
            total value of the backtesting account over the backtest period.
        * asset_price_series (list) a list of the asset prices seen over the
            backtest period.
        * event_series (list) full list of events seen, handled or generated by
            the BacktestManager
    """

    def __init__(self):

        self.event_handler_map = {
            core.const.Event.PRICE_UPDATE: self._handle_asset_price,
            core.const.Event.EQUITY_UPDATE: self._handle_equity_update,
            core.const.Event.TRANSACTION_BUY: self._handle_event,
            core.const.Event.TRANSACTION_SELL: self._handle_event,
        }

        self.equity_series = []
        self.asset_price_series = []
        self.event_series = []

    def update(self, event):
        try:
            self.event_handler_map[event.type](event.data)
        except KeyError as e:
            self._handle_event(event)

    def _handle_asset_price(self, price):
        self.asset_price_series.append(price)

    def _handle_equity_update(self, equity):
        self.equity_series.append(equity)

    def _handle_event(self, event):
        self.event_series.append(event)
