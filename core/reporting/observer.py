import collections

import pandas as pd

import core
class ABObserver(object):
    """
    ABObserver stores information which outside of the backtest,
    would be apparent from our timeseries store and database.

    Attributes:
        * equity_series (list) a list of rolling equity values, equity being
            total value of the backtesting account over the backtest period.
        * asset_price_series (list) a list of the asset prices seen over the
            backtest period.
        * event_series (list) full list of events seen, handled or generated by
            the BacktestManager
    """

    def __init__(self):
        self.events = []

    def update(self, event):
        self.events.append(event)

    def _events_to_df(self):
        account_equity = []
        asset_price = []
        cash_ammount = []
        events = []

        event_list_map =  {
            core.const.Event.PRICE_UPDATE: account_equity,
            core.const.Event.EQUITY_UPDATE: asset_price,
            core.const.Event.CASH_UPDATE: cash_ammount
        }

        # which key to use to hold price data in list
        event_key_map =  {
            core.const.Event.PRICE_UPDATE: "asset",
            core.const.Event.EQUITY_UPDATE: "equity",
            core.const.Event.CASH_UPDATE: "cash"
        }

        for event in self.events:
            if event.type in event_list_map:
                event_list_map[event.type].append(
                    {
                        "datetime": event.datetime,
                        event_key_map[event.type]: event.data
                    }
                )
            else:
                events.append({"datetime": event.datetime, event.type: True})

        account_equity_df = pd.DataFrame(account_equity).set_index("datetime").sort_index()
        asset_price_df = pd.DataFrame(asset_price).set_index("datetime").sort_index()
        cash_ammount_df = pd.DataFrame(cash_ammount).set_index("datetime").sort_index()
        event_df = pd.DataFrame(events).set_index("datetime").sort_index()

        return account_equity_df, asset_price_df, cash_ammount_df, event_df

    def retrieve(self):
        """
        Retrieve data in a useable format for analysis.

        Returns:
            * timeseries (DataFrame) bunch of different series from the backtest
            * events (DataFrame) events and when they happened, used for charting
                or something.
        """
        equity, asset, cash, events = self._events_to_df()
        timeseries = pd.concat([equity, asset, cash], axis=1)
        # merged = pd.merge(
        #     merged,
        #     event,
        #     how='left',
        #     left_index=True,
        #     right_index=True
        # )
        # merged = merged.groupby(["datetime"], as_index=True)


        return timeseries, events
